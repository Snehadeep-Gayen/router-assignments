import subprocess
import argparse
import re

def run_simulation(
        switchportcount=32,            # Default value for switchportcount is 8
        buffersize=10000,                # Default value for buffersize is 10
        packetgenprob=0.5,            # Default packet generation probability is 0.5
        queue_type='INQ',             # Default queue type is 'INQ'
        knockout=1,                   # Default knockout value for CIOQ
        inpq=1,                       # Default L value for CIOQ
        outputfile='output.csv',      # Default output file is 'output.csv'
        maxslots=10000                # Default max simulation time slots is 10,000
    ):

    print(outputfile)
    # Construct the command to run the binary with specified arguments
    binary = './routing'
    cmd = [
        binary,
        '-N', str(switchportcount),
        '-B', str(buffersize),
        '-p', str(packetgenprob),
        '-q', queue_type,
        '-K', str(knockout),
        '-L', str(inpq),
        '-o', outputfile,
        '-T', str(maxslots)
    ]

    print(cmd)

    # Run the binary and wait for it to finish
    result = subprocess.run(cmd, capture_output=True, text=True)

    if result.returncode != 0:
        print(f"Error running the simulation: {result.stderr}")
        return None

    # Read the output file generated by the binary
    with open(outputfile, 'r') as f:
        output_lines = f.readlines()

    # Extract and parse the required information (Avg PD, Avg LU, Avg Drop Prob)
    avg_pd = avg_lu = avg_drop_prob = None
    if queue_type == 'CIOQ':
        # CIOQ Output Format: N, p, L, K, Q Type, Avg PD, Avg LU, Avg Drop Prob
        cioq_pattern = re.compile(
            r'(\d+),\s*([\d.eE+-]+),\s*(\d+),\s*(\d+),\s*(\w+),\s*([\d.eE+-]+),\s*([\d.eE+-]+),\s*([\d.eE+-]+)'
        )
        match = cioq_pattern.match(output_lines[-1])
        if match:
            avg_pd = float(match.group(6))
            avg_lu = float(match.group(7))
            avg_drop_prob = float(match.group(8))
    else:
        # NOQ/INQ Output Format: N, p, Q Type, Avg PD, Avg LU, Avg Drop Prob
        noq_inq_pattern = re.compile(
            r'(\d+),\s*([\d.eE+-]+),\s*(\w+),\s*([\d.eE+-]+),\s*([\d.eE+-]+),\s*([\d.eE+-]+)'
        )
        match = noq_inq_pattern.match(output_lines[-1])
        if match:
            avg_pd = float(match.group(4))
            avg_lu = float(match.group(5))
            avg_drop_prob = float(match.group(6))

    assert(avg_pd > 0.99), f"Assertion failed for avg_pd: {avg_pd}, parameters: (N={switchportcount}, B={buffersize}, p={packetgenprob}, q={queue_type}, K={knockout}, L={inpq}, T={maxslots})"
    assert(avg_lu < 1.00001), f"Assertion failed for avg_lu: {avg_lu}, parameters: (N={switchportcount}, B={buffersize}, p={packetgenprob}, q={queue_type}, K={knockout}, L={inpq}, T={maxslots})"
    assert(avg_drop_prob < 1.00001), f"Assertion failed for avg_drop_prob: {avg_drop_prob}, parameters: (N={switchportcount}, B={buffersize}, p={packetgenprob}, q={queue_type}, K={knockout}, L={inpq}, T={maxslots})"
    
    return avg_pd, avg_lu, avg_drop_prob

def main():
    # Argument parser to get command-line arguments
    parser = argparse.ArgumentParser(description="Run routing binary and extract simulation results.")
    
    # Add all the required arguments
    parser.add_argument('-N', '--switchportcount', type=int, default=8, help="Number of input/output ports (default: 8)")
    parser.add_argument('-B', '--buffersize', type=int, default=10, help="Buffer size (default: 10)")
    parser.add_argument('-p', '--packetgenprob', type=float, default=0.5, help="Packet generation probability (default: 0.5)")
    parser.add_argument('-q', '--queuetype', choices=['NOQ', 'INQ', 'CIOQ'], default='INQ', help="Queue type (default: INQ)")
    parser.add_argument('-K', '--knockout', type=int, default=1, help="Knockout value for CIOQ")
    parser.add_argument('-L', '--inpq', type=int, default=1, help="L value for CIOQ")
    parser.add_argument('-o', '--outputfile', type=str, default='output.csv', help="Output file to store results (default: output.csv)")
    parser.add_argument('-T', '--maxslots', type=int, default=10000, help="Max simulation time slots (default: 10000)")

    # Parse arguments
    args = parser.parse_args()

    # Run the simulation and extract the metrics
    avg_pd, avg_lu, avg_drop_prob = run_simulation(
        args.switchportcount, args.buffersize, args.packetgenprob, args.queuetype, 
        args.knockout, args.inpq, args.outputfile, args.maxslots
    )

    if avg_pd is not None and avg_lu is not None and avg_drop_prob is not None:
        print(f"Avg PD: {avg_pd}, Avg LU: {avg_lu}, Avg Drop Prob: {avg_drop_prob}")
    else:
        print("Failed to extract the metrics from the output.")